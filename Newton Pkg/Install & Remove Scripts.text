InstallScript := func(partFrame, removeFrame)begin	AddArraySlot(GetGlobals().ModemLocations, {title: "Internal WiFi", id:"mdem"});		RegPrefs(kAppSymbol, GetLayout("Prefs Roll Item.t"));		prefsFrame := GetAppPrefs(kAppSymbol, kDefaultPrefs);	if (prefsFrame.restoreOnRestart) then begin		if (prefsFrame.serial0internal) then begin			// Setup the SubsystemPower Settings			local serial0state := call InternalSerialSlot.GetSubsystemPower with (kSerial0SubsystemIndex);			serial0state := band(serial0state, bnot(kSetSerialPortSelectExternalMask));			call InternalSerialSlot.SetSubsystemPower with (kSerial0SubsystemIndex, serial0state);					end;		if (prefsFrame.serial3internal) then begin			// Setup the SubsystemPower Settings			local serial3state := call InternalSerialSlot.GetSubsystemPower with (kSerial3SubsystemIndex);			serial3state := band(serial3state, bnot(kSetSerialPortSelectExternalMask));			call InternalSerialSlot.SetSubsystemPower with (kSerial3SubsystemIndex, serial3state);					end;	end else begin		// The user did not ask for these settings to be saved		// accross resets.  Clear them.		prefsFrame.serial0internal := nil;		prefsFrame.serial3internal := nil;		EntryChange(prefsFrame);	end;end;RemoveScript := func(partFrame)begin	// Unregister the preference panel	UnRegPrefs(kAppSymbol);		// Remove "mdem" modem entry in ModemLocations	local index := LSearch(GetGlobals().ModemLocations, "mdem", 0, func(A,B) begin		if (B.id) then begin		    if StrEqual(B.id, A) then return true;		end;		return nil;	end, nil);	ArrayRemoveCount(GetGlobals().ModemLocations, index, 1);		// Resture external use of serial0 if necessary	local serial0state := call InternalSerialSlot.GetSubsystemPower with (kSerial0SubsystemIndex);	if (Band(serial0state, kSetSerialPortSelectExternalMask) = 0) then begin		serial0state := bor(serial0state, kSetSerialPortSelectExternalMask);		call InternalSerialSlot.SetSubsystemPower with (kSerial0SubsystemIndex, serial0state);				end;	// Restore external use of serial3 if necessary	local serial3state := call InternalSerialSlot.GetSubsystemPower with (kSerial3SubsystemIndex);	if (Band(serial3state, kSetSerialPortSelectExternalMask) = 0) then begin		serial3state := bor(serial3state, kSetSerialPortSelectExternalMask);		call InternalSerialSlot.SetSubsystemPower with (kSerial3SubsystemIndex, serial3state);				end;end;